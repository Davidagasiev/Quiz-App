{"version":3,"sources":["Components/Select/Categories.js","Components/Select/Select.jsx","Components/Questions/Question/Question.jsx","Components/Questions/QuestionList/QuestionList.jsx","Components/Results/Results.jsx","App.js","serviceWorker.js","index.js"],"names":["categories","SelectParams","props","className","FormControl","InputLabel","id","labelId","value","numberOfQuestions","onChange","e","setNumberOfQuestions","target","menuItems","i","push","MenuItem","key","returnMenuItems","map","number","category","setCategory","index","type","setType","difficulty","setDifficulty","Question","answers","correct_answer","incorrect_answers","sort","showResult","question","RadioGroup","aria-label","name","setAnswers","answer","FormControlLabel","disabled","control","Radio","label","style","color","QuestionList","loading","CircularProgress","questions","Results","filter","length","Button","onClick","loadingNewQuestions","setShowResult","variant","App","useState","Array","setQuestions","setLoading","axios","get","then","response","data","results","catch","error","alert","message","useEffect","Divider","marginBottom","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.920fe2cc.chunk.js","sourcesContent":["const categories = [\n    'General Knowledge',\n    'Entertainment: Books',\n    'Entertainment: Film',\n    'Entertainment: Music',\n    'Entertainment: Musicals & Theatres',\n    'Entertainment: Television',\n    'Entertainment: Video Games',\n    'Entertainment: Board Games',\n    'Science & Nature',\n    'Science: Computers',\n    'Science: Mathematics',\n    'Mythology',\n    'Sports',\n    'Geography',\n    'History',\n    'Politics',\n    'Art',\n    'Celebrities',\n    'Animals',\n    'Vehicles',\n    'Entertainment: Comics',\n    'Science: Gadgets',\n    'Entertainment: Japanese Anime & Manga',\n    'Entertainment: Cartoon & Animations'\n  ];\n  \nexport default categories;","import React from 'react'\nimport \"./Select.css\";\nimport categories from './Categories';\n\nimport { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\n\n\nexport default function SelectParams(props) {\n\n    function returnMenuItems() {\n        let menuItems = [];\n        for(let i = 1; i <= 50; i++){\n            menuItems.push(\n                <MenuItem key={i} value={i}>\n                    { i }\n                </MenuItem>\n                )\n        }\n        return menuItems;\n    }\n\n    return (\n        <div className=\"Select\">\n\n{/* Number of Questions */}\n            <FormControl>\n                <InputLabel id=\"Questions\">Questions</InputLabel>\n                <Select\n                labelId=\"Questions\"\n                id=\"Questions\"\n                value={props.numberOfQuestions}\n                onChange={(e) => props.setNumberOfQuestions(e.target.value)}\n                >\n                    {returnMenuItems().map(number => number)}\n                </Select>\n            </FormControl>\n{/* Number of Questions */}\n\n{/* Select Category */}\n            <FormControl>\n                <InputLabel id=\"Category\">Category</InputLabel>\n                <Select\n                labelId=\"Category\"\n                id=\"Category\"\n                value={props.category}\n                onChange={(e) => props.setCategory(e.target.value)}\n                >\n                {categories.map((category, index) => (\n                    <MenuItem key={index + 9} value={index + 9}>\n                    {category}\n                    </MenuItem>\n                ))}\n                </Select>\n            </FormControl>\n{/* Select Category */}\n\n{/* Select Type */}\n            <FormControl>\n                <InputLabel id=\"Type\">Type</InputLabel>\n                <Select\n                    labelId=\"Type\"\n                    id=\"Type\"\n                    value={props.type}\n                    onChange={(e) => props.setType(e.target.value)}\n                >\n                    <MenuItem value={\"multiple\"}>Multiple Choice</MenuItem>\n                    <MenuItem value={\"boolean\"}>True / False</MenuItem>\n                </Select>\n            </FormControl>\n{/* Select Type */}\n\n{/* Select Difficulty */}\n            <FormControl>\n                <InputLabel id=\"Difficulty\">Difficulty</InputLabel>\n                <Select\n                labelId=\"Difficulty\"\n                id=\"Difficulty\"\n                value={props.difficulty}\n                onChange={(e) => props.setDifficulty(e.target.value)}\n                >\n                    <MenuItem value={\"easy\"}>Easy</MenuItem>\n                    <MenuItem value={\"medium\"}>Medium</MenuItem>\n                    <MenuItem value={\"hard\"}>Hard</MenuItem>\n                </Select>\n            </FormControl>\n{/* Select Difficulty */}\n        </div>\n    )\n}","import React from 'react'\nimport \"./Question.css\";\n\nimport { FormControlLabel, Radio, RadioGroup } from '@material-ui/core';\nimport CheckCircleSharpIcon from '@material-ui/icons/CheckCircleSharp';\nimport CancelSharpIcon from '@material-ui/icons/CancelSharp';\n\n\nexport default function Question(props) {\n\n    const answers = [props.correct_answer, ...props.incorrect_answers].sort();\n\n    function answerChanged(e) {\n        const answers = [...props.answers];\n        if(e.target.value === props.correct_answer){\n            answers[props.index] = true;\n            props.setAnswers(answers);\n        }else{\n            answers[props.index] = false;\n            props.setAnswers(answers);\n        }\n    }\n\n    return (\n        <div className={`Question ${props.showResult && props.answers[props.index] ? \n                                        \"right\"\n                                    : \n                                        \"\"}`\n                                    }>\n            <h3>{props.question}</h3>\n            <RadioGroup aria-label=\"gender\" name=\"gender1\" onChange={answerChanged}>\n                {answers.map((answer, index) =>\n                    props.showResult ?\n                    <div key={index} className=\"answer\">\n                        <FormControlLabel\n                            disabled\n                            value={answer} \n                            control={<Radio />} \n                            label={answer} />\n                        { answer === props.correct_answer ?\n                                <CheckCircleSharpIcon style={{color: \"green\"}} />\n                            :\n                                <CancelSharpIcon style={{color: \"red\"}} />\n                        }\n                    </div>\n                        :\n                    <FormControlLabel\n                        key={index}\n                        value={answer} \n                        control={<Radio />} \n                        label={answer} />\n                )\n                }\n            </RadioGroup>\n        </div>\n    )\n}\n","import React from 'react'\nimport \"./QuestionList.css\";\n\nimport Question from \"../Question/Question.jsx\";\nimport { CircularProgress } from '@material-ui/core';\n\nexport default function QuestionList(props) {\n    return (\n        <div className=\"QuestionList\">\n            <h2>Quiz</h2>\n            {props.loading ? \n\n                <CircularProgress />\n                :\n                props.questions.map((question, index) => \n                    <Question \n                        key={index} \n                        index={index} \n                        answers={props.answers} \n                        showResult={props.showResult}\n                        setAnswers={props.setAnswers} \n                        {...question}/>\n                    )    \n            }\n        </div>\n    )\n}\n","import { Button } from '@material-ui/core';\nimport React from 'react'\nimport \"./Results.css\";\n\nexport default function Results(props) {\n\n    const reset = () => {\n        props.loadingNewQuestions();\n        props.setShowResult(false);\n    }\n\n    return (\n        <div className=\"Results\">\n            <h2>Your Result is:</h2>\n            <h2>{props.answers.filter(answer => answer === true).length} of {props.answers.length}</h2>\n\n            <Button onClick={reset} variant=\"contained\" color=\"secondary\">\n                Try Again\n            </Button>\n        </div>\n    )\n}\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nimport axios from \"axios\";\nimport Select from './Components/Select/Select.jsx';\nimport QuestionList from \"./Components/Questions/QuestionList/QuestionList.jsx\";\nimport { Button, Divider } from '@material-ui/core';\nimport Results from './Components/Results/Results';\n\nfunction App() {\n// For Controlling Question Answers\n\nconst [answers, setAnswers] = useState(new Array(10));\nconst [showResult, setShowResult] = useState(false);\n\n// For getting new questions\n\nconst [questions, setQuestions] = useState([]);\nconst [loading, setLoading] = useState(true);\nconst [numberOfQuestions, setNumberOfQuestions] = useState(10);\nconst [category, setCategory] = useState(9);\nconst [difficulty, setDifficulty] = useState(\"easy\");\nconst [type, setType] = useState(\"multiple\");\n\nfunction loadingNewQuestions(){\n  setLoading(true);\n  axios.get(`https://opentdb.com/api.php?amount=${numberOfQuestions}&category=${category}&difficulty=${difficulty}&type=${type}`)\n  .then(function (response) {\n    // handle success\n    setQuestions(response.data.results);\n  })\n  .catch(function (error) {\n    // handle error\n    alert(error.message);\n  })\n  .then(() => {\n    setShowResult(false);\n    setLoading(false);\n    setAnswers(new Array(numberOfQuestions));\n  })\n}\n\nuseEffect(() => {\n  loadingNewQuestions();\n}, [category, difficulty, numberOfQuestions, type])\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Sweeft digital</h1>\n        <Divider />\n        <Select \n          category={category} \n          setCategory={setCategory} \n          difficulty={difficulty}\n          setDifficulty={setDifficulty}\n          numberOfQuestions={numberOfQuestions}\n          setNumberOfQuestions={setNumberOfQuestions}\n          type={type}\n          setType={setType}\n        />\n\n        <Button style={{marginBottom: \"20px\"}} onClick={loadingNewQuestions}>New Questions</Button>\n\n        <QuestionList \n          answers={answers} \n          setAnswers={setAnswers} \n          loading={loading} \n          questions={questions}\n          showResult={showResult}\n        />\n\n        <Button onClick={() => setShowResult(true)} style={{marginTop: \"30px\", marginBottom: \"30px\"}} variant=\"contained\" color=\"primary\">\n          Show Results\n        </Button>\n\n        {showResult ?\n          <Results \n            loadingNewQuestions={loadingNewQuestions}\n            setShowResult={setShowResult} \n            answers={answers}/>\n          :\n          \"\"\n        }\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}